//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import RswiftResources
import UIKit

private class BundleFinder {}
let R = _R(bundle: Bundle(for: BundleFinder.self))

struct _R {
  let bundle: Foundation.Bundle
  var color: color { .init(bundle: bundle) }
  var image: image { .init(bundle: bundle) }
  var info: info { .init(bundle: bundle) }
  var nib: nib { .init(bundle: bundle) }
  var storyboard: storyboard { .init(bundle: bundle) }

  func color(bundle: Foundation.Bundle) -> color {
    .init(bundle: bundle)
  }
  func image(bundle: Foundation.Bundle) -> image {
    .init(bundle: bundle)
  }
  func info(bundle: Foundation.Bundle) -> info {
    .init(bundle: bundle)
  }
  func nib(bundle: Foundation.Bundle) -> nib {
    .init(bundle: bundle)
  }
  func storyboard(bundle: Foundation.Bundle) -> storyboard {
    .init(bundle: bundle)
  }
  func validate() throws {
    try self.nib.validate()
    try self.storyboard.validate()
  }

  struct project {
    let developmentRegion = "en"
  }

  /// This `_R.color` struct is generated, and contains static references to 8 colors.
  struct color {
    let bundle: Foundation.Bundle

    /// Color `AccentColor`.
    var accentColor: RswiftResources.ColorResource { .init(name: "AccentColor", path: [], bundle: bundle) }

    /// Color `BG`.
    var bG: RswiftResources.ColorResource { .init(name: "BG", path: [], bundle: bundle) }

    /// Color `Blue`.
    var blue: RswiftResources.ColorResource { .init(name: "Blue", path: [], bundle: bundle) }

    /// Color `Disable`.
    var disable: RswiftResources.ColorResource { .init(name: "Disable", path: [], bundle: bundle) }

    /// Color `GrayText`.
    var grayText: RswiftResources.ColorResource { .init(name: "GrayText", path: [], bundle: bundle) }

    /// Color `Green`.
    var green: RswiftResources.ColorResource { .init(name: "Green", path: [], bundle: bundle) }

    /// Color `Main`.
    var main: RswiftResources.ColorResource { .init(name: "Main", path: [], bundle: bundle) }

    /// Color `Text`.
    var text: RswiftResources.ColorResource { .init(name: "Text", path: [], bundle: bundle) }
  }

  /// This `_R.image` struct is generated, and contains static references to 17 images.
  struct image {
    let bundle: Foundation.Bundle

    /// Image `ic_add`.
    var ic_add: RswiftResources.ImageResource { .init(name: "ic_add", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_cash`.
    var ic_cash: RswiftResources.ImageResource { .init(name: "ic_cash", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_contact`.
    var ic_contact: RswiftResources.ImageResource { .init(name: "ic_contact", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_filter`.
    var ic_filter: RswiftResources.ImageResource { .init(name: "ic_filter", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_logo`.
    var ic_logo: RswiftResources.ImageResource { .init(name: "ic_logo", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_privacy`.
    var ic_privacy: RswiftResources.ImageResource { .init(name: "ic_privacy", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_rate`.
    var ic_rate: RswiftResources.ImageResource { .init(name: "ic_rate", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_share`.
    var ic_share: RswiftResources.ImageResource { .init(name: "ic_share", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_tab_home`.
    var ic_tab_home: RswiftResources.ImageResource { .init(name: "ic_tab_home", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_tab_home_selected`.
    var ic_tab_home_selected: RswiftResources.ImageResource { .init(name: "ic_tab_home_selected", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_tab_people`.
    var ic_tab_people: RswiftResources.ImageResource { .init(name: "ic_tab_people", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_tab_people_selected`.
    var ic_tab_people_selected: RswiftResources.ImageResource { .init(name: "ic_tab_people_selected", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_tab_report`.
    var ic_tab_report: RswiftResources.ImageResource { .init(name: "ic_tab_report", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_tab_report_selected`.
    var ic_tab_report_selected: RswiftResources.ImageResource { .init(name: "ic_tab_report_selected", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_tab_settings`.
    var ic_tab_settings: RswiftResources.ImageResource { .init(name: "ic_tab_settings", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_tab_settings_selected`.
    var ic_tab_settings_selected: RswiftResources.ImageResource { .init(name: "ic_tab_settings_selected", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_web`.
    var ic_web: RswiftResources.ImageResource { .init(name: "ic_web", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }
  }

  /// This `_R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    let bundle: Foundation.Bundle
    var uiApplicationSceneManifest: uiApplicationSceneManifest { .init(bundle: bundle) }

    func uiApplicationSceneManifest(bundle: Foundation.Bundle) -> uiApplicationSceneManifest {
      .init(bundle: bundle)
    }

    struct uiApplicationSceneManifest {
      let bundle: Foundation.Bundle

      let uiApplicationSupportsMultipleScenes: Bool = false

      var _key: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest"], key: "_key") ?? "UIApplicationSceneManifest" }
      var uiSceneConfigurations: uiSceneConfigurations { .init(bundle: bundle) }

      func uiSceneConfigurations(bundle: Foundation.Bundle) -> uiSceneConfigurations {
        .init(bundle: bundle)
      }

      struct uiSceneConfigurations {
        let bundle: Foundation.Bundle
        var _key: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest", "UISceneConfigurations"], key: "_key") ?? "UISceneConfigurations" }
        var uiWindowSceneSessionRoleApplication: uiWindowSceneSessionRoleApplication { .init(bundle: bundle) }

        func uiWindowSceneSessionRoleApplication(bundle: Foundation.Bundle) -> uiWindowSceneSessionRoleApplication {
          .init(bundle: bundle)
        }

        struct uiWindowSceneSessionRoleApplication {
          let bundle: Foundation.Bundle
          var defaultConfiguration: defaultConfiguration { .init(bundle: bundle) }

          func defaultConfiguration(bundle: Foundation.Bundle) -> defaultConfiguration {
            .init(bundle: bundle)
          }

          struct defaultConfiguration {
            let bundle: Foundation.Bundle
            var uiSceneConfigurationName: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication"], key: "UISceneConfigurationName") ?? "Default Configuration" }
            var uiSceneDelegateClassName: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate" }
          }
        }
      }
    }
  }

  /// This `_R.nib` struct is generated, and contains static references to 4 nibs.
  struct nib {
    let bundle: Foundation.Bundle

    /// Nib `DebtViewController`.
    var debtViewController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "DebtViewController", bundle: bundle) }

    /// Nib `PeppleViewController`.
    var peppleViewController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "PeppleViewController", bundle: bundle) }

    /// Nib `ReportViewController`.
    var reportViewController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "ReportViewController", bundle: bundle) }

    /// Nib `SettingViewController`.
    var settingViewController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "SettingViewController", bundle: bundle) }

    func validate() throws {
      if UIKit.UIImage(named: "ic_add", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_add' is used in nib 'DebtViewController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_filter", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_filter' is used in nib 'DebtViewController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_logo", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_logo' is used in nib 'DebtViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "BG", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'BG' is used in nib 'DebtViewController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_cash", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_cash' is used in nib 'PeppleViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "BG", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'BG' is used in nib 'PeppleViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "BG", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'BG' is used in nib 'ReportViewController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_contact", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_contact' is used in nib 'SettingViewController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_privacy", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_privacy' is used in nib 'SettingViewController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_rate", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_rate' is used in nib 'SettingViewController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_share", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_share' is used in nib 'SettingViewController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_web", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_web' is used in nib 'SettingViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "Text", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Text' is used in nib 'SettingViewController', but couldn't be loaded.") }
    }
  }

  /// This `_R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    let bundle: Foundation.Bundle
    var launchScreen: launchScreen { .init(bundle: bundle) }

    func launchScreen(bundle: Foundation.Bundle) -> launchScreen {
      .init(bundle: bundle)
    }
    func validate() throws {
      try self.launchScreen.validate()
    }


    /// Storyboard `LaunchScreen`.
    struct launchScreen: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = UIKit.UIViewController

      let bundle: Foundation.Bundle

      let name = "LaunchScreen"
      func validate() throws {

      }
    }
  }
}